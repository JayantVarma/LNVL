--[[
--
-- This module contains the global settings for LNVL.
--
--]]

-- Our table of settings.
local Settings = {}
Settings.__index = Settings



-- -- DEBUGGING SETTINGS ---------------------------------------------

-- This boolean setting enables or disables debugging mode.  When LNVL
-- is in debugging mode it will print out various data to the console.
-- Developers should set this to 'false' before releasing their games.
Settings.DebugModeEnabled = true



-- -- SCREEN SIZE SETTINGS -------------------------------------------

Settings.Screen = {}

-- These settings control the height and width of the entire screen.
-- If you are including LNVL as part of a larger game which already
-- defines similar properties then you probably want to assign the
-- corresponding settings from your game to these properties.  That
-- way LNVL will automatically use the same screen dimensions as the
-- rest of your game.
Settings.Screen.Width = 800
Settings.Screen.Height = 600
Settings.Screen.Fullscreen = false

-- An array of two elements, i.e. XY-coordinates, representing the
-- center point in the screen.  This position is calculated
-- dynamically from the screen settings above and should not need any
-- manual modification.
Settings.Screen.Center = {
    Settings.Screen.Width / 2,
    Settings.Screen.Height / 2,
}



-- -- SCENE SETTINGS -------------------------------------------------

Settings.Scenes = {}

-- The default dimensions of Scene windows.  The X and Y values
-- determine the default position where the window appears when not in
-- fullscreen mode.
do
    local ratio = Settings.Screen.Width / 10
    Settings.Scenes.Width = Settings.Screen.Width - (ratio * 2)
end
do
    local ratio = Settings.Screen.Height / 10
    Settings.Scenes.Height = Settings.Screen.Height - (ratio * 5)
end
Settings.Scenes.X = (Settings.Screen.Width / 10)
Settings.Scenes.Y = (Settings.Screen.Height / 2) - 50

-- A scene container, i.e. the rectangle where dialog appears, may
-- have an optional border around it.  This value represents the width
-- of that border in pixels.
Settings.Scenes.BorderSize = 5

-- All dialog in scenes will use this color by default.  However, if a
-- character is speaking dialog then the text color for that character
-- will override this color.  So this default color mainly affects
-- narration in a scene that is not associated with any character.
Settings.Scenes.TextColor = LNVL.Color.Gray25

-- This setting controls the default font for all scenes.  Its value
-- must be a Font object from the LÃ–VE engine.  The documentation at
--
--     https://love2d.org/wiki/Font
--
-- provides more information on fonts.  By default LNVL uses a simple,
-- large font.
Settings.Scenes.DefaultFont = love.graphics.newFont(24)



-- -- CHARACTER SETTINGS ---------------------------------------------

Settings.Characters = {}

-- All dialog from characters will use this color by default.
Settings.Characters.TextColor = LNVL.Color.Black

-- These two settings control the borders around character images.  By
-- default LNVL does not draw borders around characters.  But if you
-- are using rectangular character sprites then you may want simple,
-- solid-color borders for decoration, similar to how the dialog box
-- in scenes may have a border.
--
-- You must change both of these defaults before LNVL will draw a
-- border around character images, either by changing them here or for
-- individual characters in scripts.
Settings.Characters.BorderColor = LNVL.Color.Transparent
Settings.Characters.BorderSize = 0

-- This setting determines where character images appear on screen.
-- See the 'docs/Howto.md' file or the source code for LNVL.Position
-- for a list of acceptable values.
--
-- Individual characters in scripts can change this using the isAt()
-- function, described in the same Howto document mentioned above.
Settings.Characters.DefaultPosition = LNVL.Position.Left



-- -- HANDLERS -------------------------------------------------------

-- In LNVL a 'handler' is a Lua function or coroutine that the engine
-- expects the game using LNVL to provide.  The comments for each
-- clearly indicate whether LNVL expects a plain function or a
-- coroutine.  LNVL uses these handlers to provide hooks into the
-- engine to help customize its behavior.

Settings.Handlers = {}

-- MENU HANDLER: Coroutine
--
-- When the player reaches a menu within a scene, LNVL will invoke
-- this coroutine with one argument: the LNVL.Menu object representing
-- that menu.  See the documentation for that module about the
-- properties and methods available from that class.  LNVL expects the
-- coroutine to return the player's choice from the menu, i.e. a
-- string.  For example, developers can use this handler to control
-- the user interface for how menus appear and interact in their game.
--
-- The dummy handler below automatically returns the first choice from
-- the menu without ever asking the player for input.
Settings.Handlers.Menu = coroutine.create(
    function (menu)
        return next(menu)
    end
)

-- DRAWABLE HANDLER: Table of Functions
--
-- LNVL represents images such as characters via LNVL.Drawable
-- objects.  This handler is responsible for rendering all of those to
-- the screen.  It provides a hook for games to control exactly how
-- and where those objects appear.
--
-- The handler is a table that must provide two functions.  They are
-- responsible for changing the position of a Drawable on screen, and
-- for performing the actual rendering.
--
-- These have 'nil' values because we cannot assign their default
-- values until after loading the Drawable module, which does not
-- happen until after LNVL finishing loading this Settings module.  So
-- we defer the assignment of the handlers until later.  See the code
-- in 'drawable.lua' for the default handlers, which may help better
-- convey what games can do with these hooks.
--
-- LNVL ignores the return values of all functions in this table.
Settings.Handlers.Drawable = {
    -- The draw() function recieves one argument: the LNVL.Drawable object
    -- to render onto the screen.
    ["draw"] = nil,
    
    -- The setPosition() function receives two arguments: the
    -- LNVL.Drawable object that is receiving a new position, and an
    -- LNVL.Position object representing that position.  This second
    -- argument is where the engine recommends drawing the object.
    -- For example, dialog scripts can dictate that a character move
    -- to the right of the screen; in that situation LNVL would invoke
    -- this handler with a Position object representing that
    -- direction.  See the comments in the 'position.lua' file for
    -- more details about possible positions.
    --
    -- To repeat, this argument is a suggestion.  It will never be
    -- exact X--Y screen coordinates, only a relative position such as
    -- 'Center' or 'TopLeft'.  Ideally games should use the position in
    -- combination with the dimensions of the Drawable object to determine
    -- the best place to render the image.  Note that a Drawable object
    -- does have exact coordinates; see the 'drawable,lua' source code for
    -- more information about its properties.
    ["set-position"] = nil,
}



-- Return the table of settings as the module.
return Settings
